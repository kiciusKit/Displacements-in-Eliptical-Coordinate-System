/solu 
alls,all 
*get,NC,node,,num,MAX 
*dim,TAB,array,NC,3 
*dim,MASK,array,NC,1 
!The macro require a cartesian coordinate system 
!Where z is axis according to flow 
!x-radial direction 
asyst=12 
radiv=10 
axdiv=10 
compo='CC' 
 
 
*AFUN,DEG 
cmsel,s,compo 
csys,asyst 
A=node(-1000,0,1000) 
B=node(-1000,0,-1000) 
C=node(1000,0,1000) 
D=node(1000,0,-1000) 
 
 
*get,Ax,node,A,loc,x 
*get,Ay,node,A,loc,y 
*get,Az,node,A,loc,z 
*get,Bx,node,B,loc,x 
*get,By,node,B,loc,y 
*get,Bz,node,B,loc,z 
*get,Cx,node,C,loc,x 
*get,Cy,node,C,loc,y 
*get,Cz,node,C,loc,z 
*get,Dx,node,D,loc,x 
*get,Dy,node,D,loc,y 
*get,Dz,node,D,loc,z 
 
m1x=(Ax+Cx)/2 
m1y=(Ay+Cy)/2 
m1z=(Az+Cz)/2 
m2x=(Bx+Dx)/2 
m2y=(By+Dy)/2 
m2z=(Bz+Dz)/2 
 
!Calculate a angles 
dXac=Cx-Ax 
dYac=Cy-Ay 
dZac=Cz-Az 
alphaAC=atan(dZac/dXac) 
betaAC=atan(dYac/dXac) 
gamaAC=atan(m1y/m1z) 
 
dXbd=Dx-Bx 
dYbd=Dy-By 
dZbd=Dz-Bz 
alphaBD=atan(dZbd/dXbd) 
betaBD=atan(dYbd/dXbd) 
gamaBD=atan(m2y/m2z) 
 
!Create cartesian coordinate system 
*do,i,0,radiv,1 
csys,asyst 
xloc=(m1x-m2x)*(i/radiv)+m2x 
yloc=(m1y-m2y)*(i/radiv)+m2y 
zloc=(m1z-m2z)*(i/radiv)+m2z 
THYZ=(gamaAC-gamaBD)*(i/radiv)+gamaBD 
THXY=(betaAC-betaBD)*(i/radiv)+betaBD 
THZX=(alphaAC-alphaBD)*(i/radiv)+alphaBD 
clocal,(100+i),0,xloc,yloc,zloc,THXY,THYZ,-THZX 
*enddo 
 
!get elipse dimensions 
!************************************************
*do,i,0,(radiv-1),1 
cmsel,s,compo 
csys,(100+i) 
nsel,r,loc,z,0,((m1z-m2z)/radiv) 
 
*vget,MASK(1,1),node,,nsel 
*vmask,MASK(1,1) 
*vget,TAB(1,1),node,,loc,X 
*vmask,MASK(1,1) 
*vget,TAB(1,2),node,,loc,Y 
 
!Elipse parameter calculations 
 
*get,Tdim,node,0,count 
*dim,D1,array,Tdim,3 
*dim,D1p,array,3,Tdim 
*dim,D2,array,Tdim,3 
*dim,D2p,array,3,Tdim 
*dim,DD,array,Tdim,6 
*dim,S1,array,3,3 
*dim,S2,array,3,3 
*dim,S2p,array,3,3 
*dim,S3,array,3,3 
*dim,SS,array,6,6 
*dim,C1,array,3,3 
*dim,CC,array,6,6 
*dim,TT,array,3,3 
*dim,MM,array,3,3 
*dim,MMred,array,3,3 
*dim,A1,array,3,1 
*dim,AA,array,6,1 
 
 
!Create D1 matrix 
*vmask,MASK(1,1) 
*vfun,D1(1,1),COMP,TAB(1,1) 
*vmask,MASK(1,1) 
*vfun,D1(1,3),COMP,TAB(1,2) 
*voper,D1(1,2),D1(1,1),MULT,D1(1,3)          !xi*yi 
*voper,D1(1,1),D1(1,1),MULT,D1(1,1)          !xi^2 
*voper,D1(1,3),D1(1,3),MULT,D1(1,3)          !yi^2 
 
!Create D2 matrix 
 
*vmask,MASK(1,1) 
*vfun,D2(1,1),COMP,TAB(1,1) 
*vmask,MASK(1,1) 
*vfun,D2(1,2),COMP,TAB(1,2) 
*vfill,D2(1,3),RAMP,1,0 
 
!Create D matrix 
 
*mfun,DD(1,1),COPY,D1(1,1) 
*mfun,DD(1,4),COPY,D2(1,1) 
 
!Create S matrixes 
 
*mfun,D1p(1,1),TRAN,D1(1,1) 
*moper,S1(1,1),D1p(1,1),MULT,D1(1,1)    !3x3 
 
*moper,S2(1,1),D1p(1,1),MULT,D2(1,1)    !3x3 
*mfun,S2p(1,1),TRAN,S2(1,1) 
 
*mfun,D2p(1,1),TRAN,D2(1,1)    !3x3 
*moper,S3(1,1),D2p(1,1),MULT,D2(1,1) 
 
 
*mfun,SS(1,1),copy,S1(1,1)     
*mfun,SS(1,4),copy,S2(1,1) 
*mfun,SS(4,1),TRAN,S2(1,1) 
*mfun,SS(4,4),copy,S3(1,1) 
 
!Create C matrix 
C1(1,3)=2 
C1(2,2)=-1 
C1(3,1)=2 
 
*mfun,CC(1,1),COPY,C1(1,1) 
 
!calculate a T matrix 
*moper,TT(1,1),S3(1,1),INVERT 
*vcol,3 
*voper,TT(1,1),TT(1,1),MULT,-1 
*moper,TT(1,1),TT(1,1),MULT,S2p(1,1) 
*moper,MM(1,1),S2(1,1),MULT,TT(1,1)                                                           !need to checked 
*vcol,3,3 
*voper,MM(1,1),S1(1,1),ADD,MM(1,1) 
 
*do,j,1,3,1 
MMred(1,j)=MM(3,j)/2 
MMred(2,j)=-MM(2,j) 
MMred(3,j)=MM(1,j)/2 
*enddo 
 
!Calculate eingenvalues 
*dim,ONEMAT,array,3,3                                                       !initiate an one array 
ONEMAT(1,1)=1
ONEMAT(2,2)=1
ONEMAT(3,3)=1 
 
*dmat,MMAT,D,IMPORT,APDL,MMred 
*dmat,ONEMAT,D,IMPORT,APDL,ONEMAT 
 
*dmat,evects,D,alloc,3,3 
*dmat,evals,D,alloc,3,1 
 
antype,modal 
modopt,subspace,3 
*EIGEN,MMAT,ONEMAT,,evals,evects 
 
*export,evects,APDL,eigenvectors,1,3 
*export,evals,APDL,eigenvalues,1,1 
*FREE,ALL
  
!Ansys in reversed order return einvenvectors
*dim,TEMPTAB,array,3,1
*mfun,TEMPTAB(1,1),copy,eigenvectors(1,1)
*mfun,eigenvectors(1,1),copy,eigenvectors(1,3)
*mfun,eigenvectors(1,3),copy,TEMPTAB(1,1)
*del,TEMPTAB,,nopr
 
*dim,lambda,array,3,1 
pi = 2*asin(1) 
*do,j,1,3 
lambda(j,1) = (2*pi*eigenvalues(j,1))*(2*pi*eigenvalues(j,1)) 
*enddo 
 
*dim,COND,array,1,3 
*dim,CONDp,array,3,1 
 
*do,j,1,3,1 
COND(1,j)=4*eigenvectors(1,j)*eigenvectors(3,j)-eigenvectors(2,j)**2 
*enddo 
*mfun,CONDp(1,1),TRAN,COND(1,1)     
 
 
*do,j,1,3,1 
*if,COND(1,j),GT,0,THEN 
*mfun,A1(1,1),copy,eigenvectors(1,j) 
*endif 
*enddo 
!*voper,A1(1,1),A1(1,1),MULT,-1    !Ansys calculate an negative values of eigenvector 
*vfun,AA(1,1),COPY,A1(1,1) 
*moper,AA(4,1),TT(1,1),MULT,A1(1,1) 
 
a_eli=AA(1,1)
b_eli=AA(2,1)/2
c_eli=AA(3,1)
d_eli=AA(4,1)/2
f_eli=AA(5,1)/2
g_eli=AA(6,1)
 
x0=(c_eli*d_eli-b_eli*f_eli)/(b_eli**2.0-a_eli*c_eli)
y0=(a_eli*f_eli-b_eli*d_eli)/(b_eli**2.0-a_eli*c_eli)
 
ratio=b_eli/(2*a_eli)
 
 
*if,b_eli,EQ,0,AND,a_eli,LT,c_eli,then
theta=0
*endif
*if,b_eli,EQ,0,AND,a_eli,GT,c_eli,then
theta=90
*endif
*if,b_eli,NE,0,AND,a_eli,LT,c_eli,then
theta=0.5*1/tan((a_eli-c_eli)/(2*b_eli))
*endif
*if,b_eli,NE,0,AND,a_eli,GT,c_eli,then
theta=90+0.5*1/tan((a_eli-c_eli)/(2*b_eli))
*endif
clocal,(200+i),1,x0,y0,0,theta,0,0,ratio
 
 
*del,D1,,nopr
*del,D1p,,nopr
*del,D2,,nopr
*del,D2p,,nopr
*del,DD,,nopr
*del,S1,,nopr
*del,S2,,nopr
*del,S2p,,nopr
*del,S3,,nopr
*del,SS,,nopr
*del,C1,,nopr
*del,CC,,nopr
*del,TT,,nopr
*del,MM,,nopr
*del,MMred,,nopr
*del,A1,,nopr
*del,AA,,nopr
*del,COND,,nopr
*del,CONDp,,nopr 
*del,lambda,,nopr
*del,ONEMAT,,nopr
*del,eigenvectors,,nopr
*del,eigenvalues,,nopr
*enddo 
 
/prep7
immed,0
*do,i,0,(radiv-1),1 
 
csys,(200+i)
*do,hhh,1,360,1
k,,45,hhh,0
*enddo
 
*enddo